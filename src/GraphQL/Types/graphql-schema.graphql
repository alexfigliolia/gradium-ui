schema {
  query: Query
  mutation: Mutation
}
type Query {
  userScope: LoggedInUser!
  verifySession: Boolean!
  generateUploadSignature(organizationId: Int!, type: PropertyImageType!): UploadSignature!
  generateDestroySignature(organizationId: Int!, publicId: String!, type: PropertyImageType!): DestroySignature!
  adminBasicPropertiesList(organizationId: Int!): [AdminBasicProperty!]!
}
type LoggedInUser {
  id: Int!
  name: String!
  emails: [LinkedEmail!]!
  affiliations: [UserAffiliation!]!
}
type LinkedEmail {
  email: String!
}
type UserAffiliation {
  organization: OrgAffiliation!
  roles: [PersonRole!]!
}
type OrgAffiliation {
  id: Int!
  name: String!
}
type PersonRole {
  role: PersonRoleType!
}
type UploadSignature {
  api_key: String!
  name: String!
  folder: String!
  timestamp: Int!
  signature: String!
}
type DestroySignature {
  api_key: String!
  name: String!
  folder: String!
  timestamp: Int!
  signature: String!
  invalidate: Boolean!
  resource_type: String!
  public_id: String!
}
type AdminBasicProperty {
  id: Int!
  slug: String!
  name: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zipCode: String!
  mapsLink: String!
  images: [PropertyImage!]!
  addons: [PropertyAddon!]!
}
type PropertyImage {
  id: Int!
  url: String!
}
type PropertyAddon {
  id: Int!
  type: PropertyAddonType!
}
type Mutation {
  login(email: String!, password: String!): LoggedInUser!
  logout: Boolean!
  linkEmail(userId: Int!, email: String!): BasicUser!
  deleteEmail(userId: Int!, email: String!): BasicUser!
  updateEmail(userId: Int!, previous: String!, next: String!): BasicUser!
  resetPassword(userId: Int!, previous: String!, next: String!): Boolean!
  createAccount(name: String!, email: String!, password: String!): LoggedInUser!
  forgotPassword(email: String!): String!
  createProperty(name: String!, organizationId: Int!): AdminBasicProperty!
  inviteStaffMember(organizationId: Int!, email: String!): Boolean!
  createPropertyImage(propertyId: Int!, organizationId: Int!, url: String!): PropertyImage!
  deletePropertyImage(organizationId: Int!, id: Int!): PropertyImage!
  setOrganizationName(name: String!, organizationId: Int!): Boolean!
  modifyPropertyAddons(propertyId: Int!, organizationId: Int!, additions: [PropertyAddonType!]!, deletions: [Int!]!): [PropertyAddon!]!
  updateBasicPropertyInfo(propertyId: Int!, organizationId: Int!, name: String!, address1: String!, address2: String!, city: String!, state: String!, zipCode: String!): AdminBasicProperty!
}
type BasicUser {
  name: String!
  emails: [LinkedEmail!]!
}
enum PersonRoleType {
  owner
  manager
  maintenance
  resident
}
enum PropertyImageType {
  propertyImage
  livingSpaceImage
  livingSpaceFloorPlan
}
enum PropertyAddonType {
  packageManagement
  amenityReservations
  propertyEvents
  leaseManagement
  hoaManagement
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

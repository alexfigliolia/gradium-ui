schema {
  query: Query
  mutation: Mutation
}
"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime
type Query {
  userScope: LoggedInUser!
  listPeople(
    organizationId: Int!
    limit: Int
    cursor: Int
  ): PaginatedIdentities!
  fetchLeases(
    organizationId: Int!
    search: String
    limit: Int
    cursor: Int
  ): PaginatedLeases!
  getAmenities(propertyId: Int!, organizationId: Int!): [Amenity!]!
  verifySession: Boolean!
  listSpacesForRent(
    propertyId: Int!
    organizationId: Int!
    limit: Int
    cursor: Int
  ): PaginatedIdentities!
  getLivingSpaces(propertyId: Int!, organizationId: Int!): [LivingSpace!]!
  listStaffMembers(
    organizationId: Int!
    limit: Int
    cursor: Int
  ): PaginatedIdentities!
  listManagementTasks(
    organizationId: Int!
    propertyId: Int
    priority: [ManagementTaskPriority]
    assignedToId: [Int]
    searchString: String
    archive: Boolean
  ): [ManagementTask!]!
  fetchAvailableSpaces(
    organizationId: Int!
    search: String
    limit: Int
    cursor: Int
  ): PaginatedAvailableLivingSpaces!
  fetchAmenityReservations(
    propertyId: Int!
    organizationId: Int!
    date: DateTime!
    amenityIds: [Int!]
    reservers: [Int!]
  ): [AmenityReservation!]!
  generateUploadSignature(
    organizationId: Int!
    imageType: GradiumImageType
    documentType: GradiumDocumentType
  ): UploadSignature!
  generateDestroySignature(
    organizationId: Int!
    publicId: String!
    imageType: GradiumImageType
    documentType: GradiumDocumentType
  ): DestroySignature!
  adminBasicPropertiesList(organizationId: Int!): [AdminBasicProperty!]!
  fetchSoonToBeAvailableSpaces(
    organizationId: Int!
    search: String
    limit: Int
    cursor: Int
  ): PaginatedAvailableSoonLivingSpaces!
}
type LoggedInUser {
  id: Int!
  name: String!
  emails: [LinkedEmail!]!
  affiliations: [UserAffiliation!]!
}
type LinkedEmail {
  email: String!
}
type UserAffiliation {
  organization: Identity!
  roles: [PersonRole!]!
}
type Identity {
  id: Int!
  name: String!
}
type PersonRole {
  role: PersonRoleType!
}
type PaginatedIdentities {
  list: [Identity!]!
  cursor: Int
}
type PaginatedLeases {
  list: [Lease!]!
  cursor: Int
}
type Lease {
  id: Int!
  price: Float!
  lessees: [GradiumPerson!]!
  invites: [GradiumPerson!]!
  paymentFrequency: RentPaymentFrequency!
  propertyName: String!
  spaceName: String!
  terminatedDate: DateTime
  documents: [GradiumDocument!]!
  start: DateTime!
  end: DateTime!
  status: LeaseStatus!
}
type GradiumPerson {
  id: Int!
  name: String!
  email: String!
}
type GradiumDocument {
  id: Int!
  url: String!
  thumbnail: String!
}
type Amenity {
  id: Int!
  name: String!
  price: String!
  billed: BillFrequency!
  open: DateTime!
  close: DateTime!
  capacity: Int!
  propertyId: Int!
  images: [GradiumImage!]!
  floorPlans: [GradiumImage!]!
}
type GradiumImage {
  id: Int!
  url: String!
}
type LivingSpace {
  id: Int!
  name: String!
  type: LivingSpaceType!
  beds: Int!
  baths: Float!
  size: String!
  propertyId: Int!
  images: [GradiumImage!]!
  floorPlans: [GradiumImage!]!
}
type ManagementTask {
  id: Int!
  createdAt: DateTime!
  title: String!
  description: String!
  status: ManagementTaskStatus!
  priority: ManagementTaskPriority!
  createdBy: Identity!
  images: [GradiumImage!]!
  assignedTo: Identity
  expenses: [Expense!]!
}
type Expense {
  id: Int!
  createdAt: DateTime!
  createdBy: Identity!
  cost: String!
  title: String!
  description: String!
  attachments: [GradiumImage!]!
}
type PaginatedAvailableLivingSpaces {
  list: [AvailableRentableSpace!]!
  cursor: Int
}
type AvailableRentableSpace {
  id: Int!
  name: String!
  type: LivingSpaceType!
  beds: Int!
  baths: Float!
  size: String!
  propertyId: Int!
  images: [GradiumImage!]!
  floorPlans: [GradiumImage!]!
  propertyName: String!
  availableSince: DateTime!
}
type AmenityReservation {
  id: Int!
  start: DateTime!
  end: DateTime!
  amenity: Identity!
  person: Identity!
}
type UploadSignature {
  api_key: String!
  name: String!
  folder: String!
  timestamp: Int!
  signature: String!
}
type DestroySignature {
  api_key: String!
  name: String!
  folder: String!
  timestamp: Int!
  signature: String!
  invalidate: Boolean!
  resource_type: String!
  public_id: String!
}
type AdminBasicProperty {
  id: Int!
  slug: String!
  name: String!
  address1: String!
  address2: String!
  city: String!
  state: String!
  zipCode: String!
  mapsLink: String!
  images: [GradiumImage!]!
  addons: [PropertyAddon!]!
}
type PropertyAddon {
  id: Int!
  type: PropertyAddonType!
}
type PaginatedAvailableSoonLivingSpaces {
  list: [AvailableSoonRentableSpace!]!
  cursor: Int
}
type AvailableSoonRentableSpace {
  id: Int!
  name: String!
  type: LivingSpaceType!
  beds: Int!
  baths: Float!
  size: String!
  propertyId: Int!
  images: [GradiumImage!]!
  floorPlans: [GradiumImage!]!
  propertyName: String!
  availableOn: DateTime!
  lease: LeaseSnapShot!
}
type LeaseSnapShot {
  start: DateTime!
  end: DateTime!
  status: LeaseStatus!
}
type Mutation {
  login(email: String!, password: String!): LoggedInUser!
  logout: Boolean!
  linkEmail(userId: Int!, email: String!): BasicUser!
  saveImage(
    propertyId: Int!
    organizationId: Int!
    entityId: Int!
    url: String!
    type: GradiumImageType!
  ): GradiumImage!
  deleteImage(
    propertyId: Int!
    organizationId: Int!
    id: Int!
    type: GradiumImageType!
  ): GradiumImage!
  createLease(
    start: DateTime!
    end: DateTime!
    price: Float!
    lessees: [Lessee!]!
    livingSpaceId: Int!
    paymentFrequency: RentPaymentFrequency!
    propertyId: Int!
    organizationId: Int!
  ): Lease!
  deleteEmail(userId: Int!, email: String!): BasicUser!
  updateEmail(userId: Int!, previous: String!, next: String!): BasicUser!
  saveDocument(
    propertyId: Int!
    organizationId: Int!
    entityId: Int!
    url: String!
    thumbnail: String!
    type: GradiumImageType!
  ): GradiumImage!
  resetPassword(userId: Int!, previous: String!, next: String!): Boolean!
  createAccount(name: String!, email: String!, password: String!): LoggedInUser!
  forgotPassword(email: String!): String!
  deleteAmenity(propertyId: Int!, organizationId: Int!, id: Int!): Amenity!
  createProperty(
    organizationId: Int!
    name: String!
    address1: String!
    address2: String!
    city: String!
    state: String!
    zipCode: String!
  ): AdminBasicProperty!
  createExpense(
    taskId: Int!
    organizationId: Int!
    propertyId: Int
    cost: String!
    title: String!
    description: String!
  ): Expense!
  updateExpense(
    id: Int!
    organizationId: Int!
    propertyId: Int
    cost: String!
    title: String!
    description: String!
  ): Expense!
  deleteExpense(id: Int!, organizationId: Int!, propertyId: Int): Boolean!
  deleteDocument(
    propertyId: Int!
    organizationId: Int!
    id: Int!
    type: GradiumDocumentType!
  ): GradiumImage!
  inviteStaffMember(organizationId: Int!, email: String!): Boolean!
  deleteLivingSpace(
    propertyId: Int!
    organizationId: Int!
    id: Int!
  ): LivingSpace!
  setOrganizationName(name: String!, organizationId: Int!): Boolean!
  modifyPropertyAddons(
    propertyId: Int!
    organizationId: Int!
    additions: [PropertyAddonType!]!
    deletions: [Int!]!
  ): [PropertyAddon!]!
  createOrUpdateAmenity(
    propertyId: Int!
    organizationId: Int!
    id: Int
    name: String!
    billed: BillFrequency!
    open: DateTime!
    close: DateTime!
    price: String!
    capacity: Int!
  ): Amenity!
  createManagementTask(
    organizationId: Int!
    propertyId: Int
    title: String!
    description: String!
    status: ManagementTaskStatus!
    priority: ManagementTaskPriority!
    assignedToId: Int
  ): ManagementTask!
  updateManagementTask(
    organizationId: Int!
    propertyId: Int
    title: String!
    description: String!
    status: ManagementTaskStatus!
    priority: ManagementTaskPriority!
    assignedToId: Int
    id: Int!
  ): ManagementTask!
  deleteManagementTask(
    organizationId: Int!
    propertyId: Int
    id: Int!
  ): Boolean!
  setManagementTaskStatus(
    id: Int!
    organizationId: Int!
    status: ManagementTaskStatus!
  ): Boolean!
  updateBasicPropertyInfo(
    propertyId: Int!
    organizationId: Int!
    name: String!
    address1: String!
    address2: String!
    city: String!
    state: String!
    zipCode: String!
  ): AdminBasicProperty!
  createAmenityReservation(
    propertyId: Int!
    organizationId: Int!
    amenityId: Int!
    personId: Int!
    start: DateTime!
    end: DateTime!
    charge: Boolean
  ): AmenityReservation!
  cancelAmenityReservation(
    id: Int!
    propertyId: Int!
    organizationId: Int!
  ): Int!
  updateAmenityReservation(
    id: Int!
    propertyId: Int!
    organizationId: Int!
    amenityId: Int!
    personId: Int!
    start: DateTime!
    end: DateTime!
    charge: Boolean
  ): AmenityReservation!
  createOrUpdateLivingSpace(
    propertyId: Int!
    organizationId: Int!
    id: Int
    name: String!
    type: LivingSpaceType!
    beds: Int!
    baths: Float!
    size: String!
  ): LivingSpace!
}
type BasicUser {
  name: String!
  emails: [LinkedEmail!]!
}
enum PersonRoleType {
  owner
  manager
  maintenance
  resident
}
enum RentPaymentFrequency {
  day
  month
  year
}
enum LeaseStatus {
  terminated
  pending
}
enum BillFrequency {
  hour
  day
}
enum LivingSpaceType {
  rental
  condoCoop
}
enum ManagementTaskStatus {
  todo
  inProgress
  underReview
  complete
}
enum ManagementTaskPriority {
  high
  low
  immediate
}
enum GradiumImageType {
  propertyImage
  livingSpaceImage
  livingSpaceFloorPlan
  amenityImage
  amenityFloorPlan
  taskImage
  expenseAttachment
}
enum GradiumDocumentType {
  leaseDocument
}
enum PropertyAddonType {
  packageManagement
  amenityReservations
  propertyEvents
  leaseManagement
  hoaManagement
}
input Lessee {
  name: String!
  email: String!
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
  "The URL that specifies the behavior of this scalar."
  url: String!
) on SCALAR
"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT
